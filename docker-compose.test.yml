# Docker Compose configuration for running tests
#
# Usage examples:
#   Run all tests:           docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test
#   Run unit tests:          docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test-unit
#   Run integration tests:   docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test-integration
#   Run with coverage:       docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test-coverage
#   Run specific test file:  docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test python -m pytest tests/unit/test_pdf_processor.py -v
#   Run specific test:       docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test python -m pytest tests/unit/test_pdf_processor.py::TestPDFProcessor::test_extract_basic -v
#   Debug a test:            docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend-test python -m pytest tests/unit/test_pdf_processor.py -xvs

services:
  backend-test:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: ai_curation_backend_test
    environment:
      DATABASE_URL: postgresql://curation_user:curation_pass@postgres-test:5432/ai_curation_test # gitleaks:allow
      TEST_DATABASE_URL: postgresql://curation_user:curation_pass@postgres-test:5432/ai_curation_test # gitleaks:allow
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PYTHONPATH: /app
      # Disable warnings about BuildKit
      DOCKER_BUILDKIT: 1
    volumes:
      - ./backend/app:/app/app
      - ./backend/lib:/app/lib
      - ./backend/tests:/app/tests
      - ./backend/tests/fixtures:/app/tests/fixtures
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - ai_curation_network
    working_dir: /app
    # Override the default command to run tests
    command: ["python", "-m", "pytest", "tests/", "-v", "--tb=short"]
    # Make it non-persistent (exit after tests)
    restart: "no"

  # Run only unit tests
  backend-test-unit:
    extends: backend-test
    command: ["python", "-m", "pytest", "tests/unit/", "-v", "--tb=short"]

  # Run only integration tests
  backend-test-integration:
    extends: backend-test
    command:
      ["python", "-m", "pytest", "tests/integration/", "-v", "--tb=short"]

  # Run tests with coverage report
  backend-test-coverage:
    extends: backend-test
    command:
      [
        "python",
        "-m",
        "pytest",
        "tests/",
        "-v",
        "--cov=lib",
        "--cov=app",
        "--cov-report=term-missing",
        "--cov-report=html:/app/htmlcov",
      ]
    volumes:
      - ./backend/app:/app/app
      - ./backend/lib:/app/lib
      - ./backend/tests:/app/tests
      - ./backend/tests/fixtures:/app/tests/fixtures
      - ./backend/htmlcov:/app/htmlcov # Save coverage report

  # Run PDF processor tests only
  backend-test-pdf:
    extends: backend-test
    command:
      [
        "python",
        "-m",
        "pytest",
        "tests/unit/test_pdf_processor.py",
        "tests/integration/test_real_pdf.py",
        "-v",
        "--tb=short",
      ]

  # Run chunk manager tests only
  backend-test-chunk:
    extends: backend-test
    command:
      [
        "python",
        "-m",
        "pytest",
        "tests/unit/test_chunk_manager.py",
        "-v",
        "--tb=short",
      ]

  # Run database model tests only
  backend-test-models:
    extends: backend-test
    command:
      [
        "python",
        "-m",
        "pytest",
        "tests/unit/test_models.py",
        "-v",
        "--tb=short",
      ]

  # Interactive shell for debugging
  backend-test-shell:
    extends: backend-test
    command: ["/bin/bash"]
    stdin_open: true
    tty: true

  # Python shell with test environment
  backend-test-python:
    extends: backend-test
    command: ["python"]
    stdin_open: true
    tty: true
