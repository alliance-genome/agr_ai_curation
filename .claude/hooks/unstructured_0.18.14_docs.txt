================
CODE SNIPPETS
================
TITLE: Python PDF Parsing Example
DESCRIPTION: This snippet demonstrates how to use the unstructured library to parse a PDF file and extract text content. It requires the 'unstructured[pdf]' extra to be installed.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_42

LANGUAGE: python
CODE:
```
from unstructured.partition.auto import partition

# Example PDF file path
filename = "./example.pdf"

# Partition the PDF file
elements = partition(filename=filename)

# Print the extracted text elements
for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Python: Process PDF from URL
DESCRIPTION: Shows how to partition a PDF document directly from a URL. This allows for processing PDFs hosted online without manual downloading.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_60

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Process PDF from a URL
elements = partition_pdf(url="https://example.com/document.pdf")

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Extract Text from PDF
DESCRIPTION: This snippet demonstrates how to extract plain text from a PDF file using the unstructured library. It initializes a `partition_pdf` function with the path to the PDF file.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_0

LANGUAGE: Python
CODE:
```
from unstructured.partition.auto import partition

# Example usage:
filename = "example.pdf"
partition(filename=filename)
```

--------------------------------

TITLE: Python: Processing PDF Content
DESCRIPTION: This snippet demonstrates processing PDF documents using the unstructured library in Python. It covers extracting text and metadata from PDF files.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/example-docs/fake-html-with-base64-image.html#_snippet_3

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example of partitioning PDF
filename = "example.pdf"
partition_pdf(filename=filename)
```

--------------------------------

TITLE: PDF Content Extraction
DESCRIPTION: This example demonstrates how to extract text content from PDF documents using the unstructured library. It covers the essential steps for parsing PDF files. The 'unstructured-pdf' extra is required for this functionality.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_7

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example usage of partition_pdf function
filename = "./example.pdf"
documents = partition_pdf(filename=filename)

# Print the text content of each element
for doc in documents:
    print(doc.text)
```

--------------------------------

TITLE: Process PDF with Unstructured
DESCRIPTION: This snippet demonstrates processing a PDF file with the unstructured library. It's useful for extracting text and structure from PDF documents.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_67

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Replace with your actual PDF file path
filename = "./example.pdf"

elements = partition_pdf(filename=filename)

# Print the text of each element
for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Extract Text from PDF
DESCRIPTION: This example shows how to extract text content from a PDF file using the unstructured library. It specifically partitions a PDF file and prints the text of each element. Requires the 'unstructured' library and potentially 'pdfminer.six'.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_11

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example usage:
pdf_filename = "example.pdf"

# Partition the PDF file
elements = partition_pdf(filename=pdf_filename)

# Print the text from each element
for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Extract Tables from PDF
DESCRIPTION: This example focuses on extracting tabular data from a PDF file. The `partition_pdf` function can identify and extract tables, returning them as separate elements.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_5

LANGUAGE: Python
CODE:
```
from unstructured.partition.auto import partition

# Example usage:
filename = "example_with_tables.pdf"
partition(filename=filename, infer_table_structure=True)
```

--------------------------------

TITLE: Partition PDF Files with Unstructured
DESCRIPTION: Demonstrates how to use the `partition_pdf` function from the unstructured library within a Python interpreter to process a PDF file. It takes a filename as input and returns a list of elements.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/README.md#_snippet_3

LANGUAGE: python
CODE:
```
from unstructured.partition.pdf import partition_pdf
elements = partition_pdf(filename="example-docs/layout-parser-paper-fast.pdf")
```

--------------------------------

TITLE: Python: Extract Text from PDF
DESCRIPTION: Shows a specific example of using the unstructured library to extract text content from a PDF file. It emphasizes the library's capability in handling PDF documents.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_120

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example usage:
pdf_elements = partition_pdf(filename="example.pdf")
print(pdf_elements)
```

--------------------------------

TITLE: Python: Process Document with PDF Strategy
DESCRIPTION: Shows how to process a PDF document using a specific strategy, such as 'hi_res'. This strategy is often used for more complex PDF layouts.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_19

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Process a PDF document with a specific strategy
elements = partition_pdf(filename="./example.pdf", strategy="hi_res")

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Python: Process PDF with OCR Settings
DESCRIPTION: Demonstrates processing PDF files with specific OCR (Optical Character Recognition) settings enabled for scanned documents.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_131

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example usage:
pdf_elements = partition_pdf(filename="scanned.pdf", ocr_languages='eng')
print(pdf_elements)
```

--------------------------------

TITLE: Extract Text from PDF with OCR Enabled
DESCRIPTION: This snippet demonstrates extracting text from PDF files, including those with images of text, by enabling OCR. It partitions a PDF file with OCR enabled. Requires 'unstructured', 'pdfminer.six', and an OCR engine like Tesseract.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_28

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example usage:
pdf_filename = "example_with_images.pdf"

# Partition the PDF file with OCR enabled
elements = partition_pdf(filename=pdf_filename, ocr_languages='eng')

# Print the text from each element
for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Python: Process Document with PDF Infer Table Types
DESCRIPTION: Demonstrates how to infer table types when processing PDF documents. This is useful for extracting structured data from tables within PDFs.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_18

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Process a PDF document and infer table types
elements = partition_pdf(filename="./example.pdf", infer_table_types=True)

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Python: Extract Text from PDF
DESCRIPTION: This Python code snippet shows how to extract text content from a PDF file using the unstructured library. It highlights the ability to handle specific file types and retrieve textual data.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_34

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example usage:
filename = "example.pdf"
elements = partition_pdf(filename=filename)
```

--------------------------------

TITLE: Python: Process Document with PDF Encoding
DESCRIPTION: Illustrates how to process a PDF document with a specified encoding, such as 'latin-1'. This is important for handling PDFs with specific character sets.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_20

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Process a PDF document with a specific encoding
elements = partition_pdf(filename="./example.pdf", encoding="latin-1")

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Parse PDF Document with Unstructured
DESCRIPTION: Demonstrates the basic usage of the `partition` function from the `unstructured.partition.auto` module to parse a PDF file. This function automatically detects the file type and processes it. The output is a list of elements, which can be printed as a string representation.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/README.md#_snippet_14

LANGUAGE: python
CODE:
```
from unstructured.partition.auto import partition

elements = partition("example-docs/layout-parser-paper.pdf")
print("\n\n".join([str(el) for el in elements]))
```

--------------------------------

TITLE: Python: Extract Text from PDF
DESCRIPTION: This snippet specifically demonstrates the process of extracting text from PDF documents using the unstructured library. It's a common use case for document processing.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_154

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example: Process a PDF file
filename = "example.pdf"
with open(filename, "rb") as f:
    elements = partition_pdf(file=f)

for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Process PDF Files with Unstructured
DESCRIPTION: This Python code snippet demonstrates how to use the 'unstructured' library to process PDF files. It shows basic file handling and data extraction, with no external dependencies beyond the library itself.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/example-docs/fake-html-pre.htm#_snippet_40

LANGUAGE: python
CODE:
```
from unstructured.partition.auto import partition

# Example usage
filename = "example.pdf"
partition(filename=filename)
```

--------------------------------

TITLE: Python: Process Document with PDF Skip Single Word Elements
DESCRIPTION: Demonstrates skipping single-word elements when processing PDF documents. This helps in refining the extracted text by removing very short, potentially insignificant, elements.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_21

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Process a PDF document and skip single word elements
elements = partition_pdf(filename="./example.pdf", skip_single_word_elements=True)

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Python: Extract Text from Documents
DESCRIPTION: This code example shows how to extract plain text content from various document formats using the unstructured library. It supports formats like PDF, DOCX, and HTML. Ensure the 'unstructured' library is installed.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_108

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf

# Example for PDF
pdf_elements = partition_pdf(filename="./example.pdf")
print([str(el) for el in pdf_elements])

from unstructured.partition.docx import partition_docx

# Example for DOCX
docx_elements = partition_docx(filename="./example.docx")
print([str(el) for el in docx_elements])

from unstructured.partition.html import partition_html

# Example for HTML
html_elements = partition_html(filename="./example.html")
print([str(el) for el in html_elements])
```

--------------------------------

TITLE: Partition Text Files with Unstructured
DESCRIPTION: Shows how to use the `partition_text` function from the unstructured library in Python to process a plain text file. Similar to PDF partitioning, it accepts a filename and outputs a list of elements.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/README.md#_snippet_4

LANGUAGE: python
CODE:
```
from unstructured.partition.text import partition_text
elements = partition_text(filename="example-docs/fake-text.txt")
```

--------------------------------

TITLE: Install pypdf
DESCRIPTION: Installs the pypdf library version 6.0.0, a dependency for base.txt and extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_55

LANGUAGE: shell
CODE:
```
pip install pypdf==6.0.0
```

--------------------------------

TITLE: Install deprecated
DESCRIPTION: Installs the deprecated library version 1.2.18, a dependency for pikepdf.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_11

LANGUAGE: shell
CODE:
```
pip install deprecated==1.2.18
```

--------------------------------

TITLE: Install pikepdf
DESCRIPTION: Installs the pikepdf library version 9.10.2, a dependency specified in extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_45

LANGUAGE: shell
CODE:
```
pip install pikepdf==9.10.2
```

--------------------------------

TITLE: Install pdf2image
DESCRIPTION: Installs the pdf2image library version 1.17.0, a dependency specified in extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_42

LANGUAGE: shell
CODE:
```
pip install pdf2image==1.17.0
```

--------------------------------

TITLE: Install pdfminer-six
DESCRIPTION: Installs the pdfminer-six library version 20250327, a dependency for unstructured-inference and specified in constraints.txt and extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_43

LANGUAGE: shell
CODE:
```
pip install pdfminer-six==20250327
```

--------------------------------

TITLE: Install effdet
DESCRIPTION: Installs the effdet library version 0.4.1, a dependency specified in extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_12

LANGUAGE: shell
CODE:
```
pip install effdet==0.4.1
```

--------------------------------

TITLE: Install lxml
DESCRIPTION: Installs the lxml library version 6.0.1, a dependency for pikepdf and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_30

LANGUAGE: shell
CODE:
```
pip install lxml==6.0.1
```

--------------------------------

TITLE: Install onnx
DESCRIPTION: Installs the onnx library version 1.18.0, a dependency for extra-pdf-image.in and unstructured-inference.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_37

LANGUAGE: shell
CODE:
```
pip install onnx==1.18.0
```

--------------------------------

TITLE: Install onnxruntime
DESCRIPTION: Installs the onnxruntime library version 1.19.2, a dependency for extra-pdf-image.in and unstructured-inference.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_38

LANGUAGE: shell
CODE:
```
pip install onnxruntime==1.19.2
```

--------------------------------

TITLE: Install cryptography
DESCRIPTION: Installs the cryptography library version 45.0.6, a dependency for pdfminer-six and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_9

LANGUAGE: shell
CODE:
```
pip install cryptography==45.0.6
```

--------------------------------

TITLE: Install charset-normalizer
DESCRIPTION: Installs the charset-normalizer library version 3.4.3, a dependency for pdfminer-six and requests, and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_6

LANGUAGE: shell
CODE:
```
pip install charset-normalizer==3.4.3
```

--------------------------------

TITLE: Handling Different File Formats
DESCRIPTION: This section demonstrates the project's capability to handle various file formats, such as PDFs, Word documents, and HTML. It highlights the flexibility of the unstructured library in parsing diverse data sources.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_88

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf
from unstructured.partition.docx import partition_docx
from unstructured.partition.html import partition_html

# Example for PDF
pdf_elements = partition_pdf(filename="example.pdf")
for element in pdf_elements:
    print(element.text)

# Example for DOCX
docx_elements = partition_docx(filename="example.docx")
for element in docx_elements:
    print(element.text)

# Example for HTML
html_elements = partition_html(filename="example.html")
for element in html_elements:
    print(element.text)
```

--------------------------------

TITLE: Python: Handling Different Document Types
DESCRIPTION: This Python code focuses on processing various document types, including PDFs and HTML. It showcases the library's ability to adapt to different file formats and extract relevant information efficiently.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_86

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition as partition_pdf
from unstructured.partition.html import partition as partition_html

# Process a PDF file
pdf_elements = partition_pdf(filename="./report.pdf")
for element in pdf_elements:
    print(f"PDF Element: {element.text}")

# Process an HTML file
html_elements = partition_html(filename="./page.html")
for element in html_elements:
    print(f"HTML Element: {element.text}")

```

--------------------------------

TITLE: LayoutParser Coordinate Transformations
DESCRIPTION: Demonstrates coordinate transformations like shift, pad, scale, relative_to, and condition_on for manipulating layout element positions within documents.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_3

LANGUAGE: Python
CODE:
```
from layoutparser.elements import Rectangle, Quadrilateral

# Example usage of transformations (conceptual)
rect = Rectangle(x_1=10, y_1=20, x_2=100, y_2=200)
shifted_rect = rect.shift(dx=5, dy=5)
scaled_rect = rect.scale(scale_x=1.2, scale_y=0.8)

quad = Quadrilateral(points=[(10, 20), (100, 25), (95, 200), (15, 190)])
# relative_to and condition_on would involve other elements or image contexts
```

--------------------------------

TITLE: LayoutParser TextBlock and Layout Classes
DESCRIPTION: Illustrates the creation and usage of TextBlock for individual layout elements and Layout for batch processing of TextBlocks, including hierarchical structures.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_4

LANGUAGE: Python
CODE:
```
from layoutparser.elements import TextBlock, Layout

# Example TextBlock creation	ext_block = TextBlock(block=Rectangle(x_1=50, y_1=50, x_2=150, y_2=100), text='Example Text', type='text')

# Example Layout creation
layout = Layout([text_block, TextBlock(block=Rectangle(x_1=200, y_1=50, x_2=300, y_2=100), type='title')])

# Example of nested layout (conceptual)
parent_block = TextBlock(block=Rectangle(x_1=10, y_1=10, x_2=400, y_2=300), type='page')
child_block = TextBlock(block=Rectangle(x_1=50, y_1=50, x_2=150, y_2=100), text='Section 1', type='text', parent=0) # parent=0 refers to parent_block

nested_layout = Layout([parent_block, child_block])
```

--------------------------------

TITLE: Install pi-heif
DESCRIPTION: Installs the pi-heif library version 1.1.0, a dependency specified in extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_44

LANGUAGE: shell
CODE:
```
pip install pi-heif==1.1.0
```

--------------------------------

TITLE: LayoutParser Image Cropping
DESCRIPTION: Shows how to crop image segments based on coordinate definitions using the crop_image function.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_5

LANGUAGE: Python
CODE:
```
import numpy as np
from layoutparser.elements import Rectangle
from layoutparser.utils import crop_image

# Assume 'image' is a numpy array representing the document image
# Example: Create a dummy image
image = np.random.randint(0, 256, size=(500, 500, 3), dtype=np.uint8)

# Define a region to crop
crop_region = Rectangle(x_1=50, y_1=50, x_2=150, y_2=100)

# Crop the image
cropped_image = crop_image(image, crop_region)

# cropped_image is now a numpy array representing the specified region
```

--------------------------------

TITLE: Install pypdfium2
DESCRIPTION: Installs the pypdfium2 library version 4.30.0, a dependency for unstructured-inference.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_56

LANGUAGE: shell
CODE:
```
pip install pypdfium2==4.30.0
```

--------------------------------

TITLE: Install google-cloud-vision
DESCRIPTION: Installs the google-cloud-vision library version 3.10.2, a dependency specified in extra-pdf-image.in.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_19

LANGUAGE: shell
CODE:
```
pip install google-cloud-vision==3.10.2
```

--------------------------------

TITLE: Document Reorganization for OCR
DESCRIPTION: This approach reorganizes text based on token bounding boxes to address challenges like irregular spacing, improving OCR recall rates. The reorganized dense text is then sent to OCR APIs.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_18

LANGUAGE: Python
CODE:
```
# Conceptual representation of document reorganization
# Actual implementation would involve manipulating token bounding boxes
# and image data within LayoutParser or a similar framework.

# Assume 'tokens' is a list of token objects with bounding boxes
# sorted_tokens = sorted(tokens, key=lambda t: (t.y_coordinate, t.x_coordinate))
# reorganized_image = create_dense_text_image(sorted_tokens)

# This reorganized image would then be processed by an OCR API.
```

--------------------------------

TITLE: LayoutParser: Model Zoo for Document Image Analysis
DESCRIPTION: LayoutParser includes a rich repository of pre-trained neural network models (Model Zoo) that can be easily loaded and used for various document image analysis tasks, promoting efficient out-of-the-box usage.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_1

LANGUAGE: Python
CODE:
```
# Example of loading a different model from the Model Zoo
# For table detection
table_detection_model = lp.Detectron2LayoutModel.from_pretrained("lp://TableTransformer/table-detection")

# For text recognition (example using a placeholder, actual implementation would vary)
# text_recognition_model = lp.TesseractOcrAgent(languages='eng')

# Example usage would involve loading an image and passing it to the respective model
```

--------------------------------

TITLE: LayoutParser Library for Document Image Analysis
DESCRIPTION: LayoutParser is an open-source Python library that provides a unified toolkit for deep learning-based document image analysis. It simplifies tasks like layout detection and character recognition, and supports extensibility through a community platform for sharing models and pipelines.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_0

LANGUAGE: Python
CODE:
```
import layoutparser as lp

# Example usage (conceptual):
# Load a model
model = lp.Detectron2LayoutModel('lp://PubLayNet/mask_rcnn_R_50_FPN_3x/config')

# Process an image
image = cv2.imread("path/to/your/image.jpg")
layout = model.detect(image)

# Visualize the layout
vis_layout = lp.draw_box(image, layout, box_width=3, show_element_type=True)
cv2.imshow("Layout", vis_layout)
cv2.waitKey(0)
```

--------------------------------

TITLE: Python: Process PowerPoint Files
DESCRIPTION: Shows the extraction of content from PowerPoint presentation files (.pptx) using the unstructured library.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_126

LANGUAGE: Python
CODE:
```
from unstructured.partition.pptx import partition_pptx

# Example usage:
pptx_elements = partition_pptx(filename="example.pptx")
print(pptx_elements)
```

--------------------------------

TITLE: Python: Process PowerPoint Files
DESCRIPTION: This Python snippet shows how to process PowerPoint (.pptx) files using the unstructured library, extracting text and potentially slide information.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_39

LANGUAGE: Python
CODE:
```
from unstructured.partition.pptx import partition_pptx

# Example usage:
filename = "example.pptx"
elements = partition_pptx(filename=filename)
```

--------------------------------

TITLE: Install pillow
DESCRIPTION: Installs the pillow library version 11.3.0, a dependency for matplotlib, pdf2image, pi-heif, pikepdf, torchvision, and unstructured-pytesseract.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_46

LANGUAGE: shell
CODE:
```
pip install pillow==11.3.0
```

--------------------------------

TITLE: Extract Text from PowerPoint Presentations
DESCRIPTION: This snippet demonstrates extracting text from PowerPoint presentations (.ppt, .pptx) using the unstructured library. It partitions the presentation and prints the text. Requires 'unstructured' and 'python-pptx'.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_18

LANGUAGE: Python
CODE:
```
from unstructured.partition.pptx import partition_pptx

# Example usage:
pptx_filename = "example.pptx"

# Partition the PowerPoint presentation
elements = partition_pptx(filename=pptx_filename)

# Print the text from each element
for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Text Extraction from Documents
DESCRIPTION: This section focuses on extracting plain text content from different document types like PDFs, DOCX, and HTML using the unstructured library. It highlights the flexibility in handling diverse file formats.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_147

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf
from unstructured.partition.docx import partition_docx
from unstructured.partition.html import partition_html

# Extract text from a DOCX file
docx_elements = partition_docx(filename="example.docx")
for element in docx_elements:
    print(element.text)

# Extract text from an HTML file
html_elements = partition_html(filename="example.html")
for element in html_elements:
    print(element.text)
```

--------------------------------

TITLE: Python: Process Image with URL
DESCRIPTION: Illustrates processing image files from a URL, leveraging OCR for text extraction from the image.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_133

LANGUAGE: Python
CODE:
```
from unstructured.partition.image import partition_image

# Example usage:
image_elements = partition_image(url="http://example.com/image.jpg")
print(image_elements)
```

--------------------------------

TITLE: Layout Detection with LayoutParser
DESCRIPTION: This snippet demonstrates using LayoutParser's object detection models to identify columns and tokens within document images. It achieves high AP scores for both column and token detection across multiple categories.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_17

LANGUAGE: Python
CODE:
```
from unstructured.partition.auto import partition

# Example of partitioning a document with LayoutParser
# This implicitly uses LayoutParser for layout detection
filename = "path/to/your/document.pdf"
partition(filename=filename)
```

--------------------------------

TITLE: PyTorch for Deep Learning
DESCRIPTION: PyTorch is an open-source machine learning framework that accelerates the path from research prototyping to production deployment. It offers a Python-first approach, with seamless integration with the Python data science stack.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_23

LANGUAGE: Python
CODE:
```
import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple neural network
class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.fc = nn.Linear(10, 1)

    def forward(self, x):
        return self.fc(x)

# Instantiate the model
model = SimpleNet()

# Define loss function and optimizer
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

# Example data
inputs = torch.randn(1, 10)
labels = torch.randn(1, 1)

# Forward pass
outputs = model(inputs)
loss = criterion(outputs, labels)

# Backward pass and optimization
optimizer.zero_grad()
loss.backward()
optimizer.step()

print(f'Loss: {loss.item()}')
```

--------------------------------

TITLE: Install certifi
DESCRIPTION: Installs the certifi library version 2025.8.3, a dependency for requests and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_4

LANGUAGE: shell
CODE:
```
pip install certifi==2025.8.3
```

--------------------------------

TITLE: Layout Detection with LayoutParser
DESCRIPTION: Demonstrates how to perform layout detection on a document image using a pre-trained LayoutParser model. It loads an image, initializes a Detectron2-based layout model, and then detects the layout.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper-with-table.jpg.md#_snippet_0

LANGUAGE: Python
CODE:
```
import layoutparser as lp
import cv2

image = cv2.imread("image_file") # load images
model = lp.Detectron2LayoutModel("lp://PubLayNet/faster_rcnn_R_50_FPN_3x/config")
layout = model.detect(image)
```

--------------------------------

TITLE: LayoutParser: Applying DL Models for Document Image Analysis
DESCRIPTION: This snippet demonstrates the core functionality of LayoutParser, which provides an off-the-shelf toolkit for applying deep learning models to various document image analysis tasks. It aims to simplify the process for researchers and developers.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_0

LANGUAGE: Python
CODE:
```
import layoutparser as lp

# Load a pre-trained layout detection model
model = lp.Detectron2LayoutModel('lp://PubLayNet/mask_rcnn_R_50_FPN_3x/config',
                                 extra_config = {"MODEL.ROI_HEADS.SCORE_THRESH_TEST": 0.5},
                                 label_map = {0: "Text", 1: "Title", 2: "List", 3: "Table", 4: "Figure"})

# Load an image
image = lp.load_image_from_file("path/to/your/document.jpg")

# Detect layoutlayout = model.detect(image)

# Print the detected layout elements
for block in layout:
    print(f"Block type: {block.type}, Score: {block.score:.2f}, Box: {block.block}")

# Visualize the layout
lp.draw_box(image, layout, box_width=3).save("output_layout.jpg")
```

--------------------------------

TITLE: Python: Process Image from URL
DESCRIPTION: Demonstrates how to partition an image directly from a URL. This enables text extraction from images hosted online using OCR.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_61

LANGUAGE: Python
CODE:
```
from unstructured.partition.image import partition_image

# Process image from a URL
elements = partition_image(url="https://example.com/image.jpg")

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Hugging Face Transformers for NLP
DESCRIPTION: Hugging Face's Transformers library provides state-of-the-art pre-trained models for Natural Language Processing (NLP) tasks. It offers easy access to models like BERT, GPT-2, and others for various applications.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_22

LANGUAGE: Python
CODE:
```
from transformers import pipeline

# Example: Sentiment Analysis
sentiment_analyzer = pipeline('sentiment-analysis')
result = sentiment_analyzer('This is a great library!')
print(result)

# Example: Text Generation
text_generator = pipeline('text-generation', model='gpt2')
generated_text = text_generator('In a world of', max_length=50, num_return_sequences=1)
print(generated_text)
```

--------------------------------

TITLE: Training Layout Detection Models with LayoutParser
DESCRIPTION: LayoutParser supports training custom layout detection models using a small dataset. It integrates with active learning tools for efficient annotation and achieves high accuracy in identifying document structures like columns and tokens.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_16

LANGUAGE: Python
CODE:
```
# Conceptual code for training a column detection model
# Requires a curated dataset and annotation tool integration
# from layoutparser.train import Trainer
# trainer = Trainer(config_path='path/to/column_detection_config.yaml')
# trainer.train()

# Conceptual code for training a token detection model
# Requires a curated dataset and annotation tool integration
# from layoutparser.train import Trainer
# trainer = Trainer(config_path='path/to/token_detection_config.yaml')
# trainer.train()

```

--------------------------------

TITLE: Bash: Download sample documents
DESCRIPTION: This bash script downloads sample documents for testing the unstructured library. It uses curl to fetch files from a URL.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_97

LANGUAGE: Bash
CODE:
```
curl -o example.txt https://raw.githubusercontent.com/Unstructured-IO/unstructured/main/example.txt
curl -o example.pdf https://raw.githubusercontent.com/Unstructured-IO/unstructured/main/example.pdf
curl -o example.docx https://raw.githubusercontent.com/Unstructured-IO/unstructured/main/example.docx
curl -o example.html https://raw.githubusercontent.com/Unstructured-IO/unstructured/main/example.html
```

--------------------------------

TITLE: Install psutil
DESCRIPTION: Installs the psutil library version 7.0.0, a dependency for accelerate and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_49

LANGUAGE: shell
CODE:
```
pip install psutil==7.0.0
```

--------------------------------

TITLE: LayoutParser: Tools for Document Image Data Annotation and Model Tuning
DESCRIPTION: LayoutParser provides comprehensive tools to support efficient document image data annotation and model fine-tuning or re-training. This allows users to customize models for specific document types and improve detection accuracy.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_2

LANGUAGE: Python
CODE:
```
# Placeholder for annotation tool usage
# The library provides functionalities to facilitate the creation of labeled datasets
# and the fine-tuning of existing models on custom data.

# Example of fine-tuning (conceptual):
# custom_model = lp.fine_tune_model(base_model, training_data, validation_data, epochs=10)

# The actual implementation details for annotation and fine-tuning would be
# found within the LayoutParser library's documentation and examples.
```

--------------------------------

TITLE: Install cffi
DESCRIPTION: Installs the cffi library version 1.17.1, a dependency for cryptography and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_5

LANGUAGE: shell
CODE:
```
pip install cffi==1.17.1
```

--------------------------------

TITLE: Install pycparser
DESCRIPTION: Installs the pycparser library version 2.22, a dependency for cffi and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_53

LANGUAGE: shell
CODE:
```
pip install pycparser==2.22
```

--------------------------------

TITLE: Data Parsing with unstructured-io
DESCRIPTION: Shows how to use the unstructured-io library to parse different file types. It highlights the flexibility in handling various document formats.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/testfiles/staging/embedded-images.pdf.md#_snippet_7

LANGUAGE: Python
CODE:
```
from unstructured.partition.auto import partition

# Example for PDF
filename = "example.pdf"
elements = partition(filename=filename)
print(elements)

# Example for DOCX
filename = "example.docx"
elements = partition(filename=filename)
print(elements)
```

--------------------------------

TITLE: Install python-dateutil
DESCRIPTION: Installs the python-dateutil library version 2.9.0.post0, a dependency for matplotlib, pandas, and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_57

LANGUAGE: shell
CODE:
```
pip install python-dateutil==2.9.0.post0
```

--------------------------------

TITLE: Python: Process Microsoft PowerPoint Document
DESCRIPTION: Demonstrates the process of partitioning a Microsoft PowerPoint document (.pptx) using the unstructured library. This extracts text and structure from PowerPoint presentations.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_34

LANGUAGE: Python
CODE:
```
from unstructured.partition.pptx import partition_pptx

# Process a pptx file
elements = partition_pptx(filename="./example.pptx")

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Install Local Inference Dependencies
DESCRIPTION: Installs additional models and dependencies required for local inference, particularly for processing images and PDFs.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
make install-local-inference
```

--------------------------------

TITLE: Python: Document Processing with Specific Options
DESCRIPTION: This Python snippet illustrates advanced document processing using the partition function with specific parameters. It highlights the flexibility of the library in handling different file types and extraction strategies.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_85

LANGUAGE: Python
CODE:
```
from unstructured.partition.docx import partition as partition_docx

# Partition a DOCX file with specific settings
docx_elements = partition_docx(filename="./sample.docx", strategy="fast")

for element in docx_elements:
    print(f"DOCX Element Text: {element.text}")

```

--------------------------------

TITLE: Scale Layout Block
DESCRIPTION: Demonstrates the 'scale' method for LayoutParser's layout elements. This method scales a block by a given factor in both the x and y directions, useful for resizing elements proportionally.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_9

LANGUAGE: Python
CODE:
```
block.scale(fx, fy)
```

--------------------------------

TITLE: Table Detection with LayoutParser
DESCRIPTION: This snippet describes a lightweight table detector within LayoutParser that identifies tables and cells in various page locations, with minor error predictions in some cases.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_20

LANGUAGE: Python
CODE:
```
# Conceptual representation of table detection using LayoutParser

# from layoutparser.models import Detectron2LayoutModel

# Load a pre-trained table detection model
# table_detection_model = Detectron2LayoutModel('path/to/table_detection_model')

# Process an image to detect tables and cells
# image = cv2.imread('document_with_table.png')
# table_layout = table_detection_model.detect(image)

# The 'table_layout' would contain detected tables and cells.
```

--------------------------------

TITLE: Detect Text Tokens using OCR Agent
DESCRIPTION: Shows how to use an initialized OCR agent (e.g., TesseractAgent) to detect text tokens from an image. The detected tokens are stored in layout data structures, facilitating seamless integration into a digitization pipeline.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_7

LANGUAGE: Python
CODE:
```
tokens = ocr_agent.detect(image)
```

--------------------------------

TITLE: Install pandas
DESCRIPTION: Installs the pandas library version 2.3.2, a dependency for unstructured-inference.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_41

LANGUAGE: shell
CODE:
```
pip install pandas==2.3.2
```

--------------------------------

TITLE: Process PowerPoint Presentations
DESCRIPTION: This Python code snippet illustrates the process of extracting content from PowerPoint (.pptx) files using the 'unstructured' library. It covers basic text extraction from slides.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/example-docs/fake-html-pre.htm#_snippet_44

LANGUAGE: python
CODE:
```
from unstructured.partition.pptx import partition_pptx

# Example usage
filename = "example.pptx"
pptx_elements = partition_pptx(filename=filename)

for element in pptx_elements:
    print(element.text)
```

--------------------------------

TITLE: Document Processing with Unstructured
DESCRIPTION: This section focuses on processing various document types using the unstructured library. It highlights how to extract text, metadata, and other relevant information from files like PDFs, DOCX, and HTML.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_157

LANGUAGE: Python
CODE:
```
from unstructured.partition.pdf import partition_pdf
from unstructured.partition.docx import partition_docx
from unstructured.partition.html import partition_html

# Process a PDF file
pdf_elements = partition_pdf(filename="document.pdf")

# Process a DOCX file
docx_elements = partition_docx(filename="document.docx")

# Process an HTML file
html_elements = partition_html(filename="document.html")
```

--------------------------------

TITLE: Install googleapis-common-protos
DESCRIPTION: Installs the googleapis-common-protos library version 1.70.0, a dependency for google-api-core and grpcio-status.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_20

LANGUAGE: shell
CODE:
```
pip install googleapis-common-protos==1.70.0
```

--------------------------------

TITLE: Automatic Differentiation in PyTorch
DESCRIPTION: PyTorch's autograd engine enables automatic differentiation of computations. This is crucial for training neural networks as it computes gradients efficiently.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_24

LANGUAGE: Python
CODE:
```
import torch

x = torch.ones(2, 2, requires_grad=True)
y = x + 2
z = y * y * 3
out = z.mean()

# Compute gradients
out.backward()

# Print gradients
print(x.grad)
```

--------------------------------

TITLE: LayoutParser: Unified Toolkit for DL-Based DIA
DESCRIPTION: LayoutParser is a toolkit designed for document image analysis (DIA) using deep learning. It facilitates the creation of both large-scale, precision-focused pipelines and light-weight, flexible pipelines for document digitization.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_15

LANGUAGE: Python
CODE:
```
import layoutparser as lp

# Example of loading a pre-trained model
model = lp.Detectron2LayoutModel('lp://PubLayNet/mask_rcnn_R_50_FPN_3x/config')

# Example of processing a document image
image = cv2.imread("path/to/your/document.jpg")
layout = model.detect(image)

# Example of grouping tokens within columns
# (Conceptual - actual implementation depends on layout structure)
# grouped_tokens = lp.group_tokens_by_column(layout)

# Example of rearranging columns based on horizontal position
# (Conceptual - actual implementation depends on layout structure)
# reordered_layout = lp.rearrange_columns(layout)

```

--------------------------------

TITLE: LayoutParser: Document Image Analysis Toolkit
DESCRIPTION: LayoutParser is a Python library designed for deep learning-based document image analysis. It provides tools for creating document processing pipelines, customizing deep learning models, and facilitating the sharing of models and pipelines within a community.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_20

LANGUAGE: Python
CODE:
```
import layoutparser as lp

# Example usage (conceptual, as no specific code is provided in the text)
# Load a document image
# image = cv2.imread("path/to/your/document.png")

# Initialize a layout detection model
# model = lp.Detectron2LayoutModel('lp://PubLayNet/mask_rcnn_R_50_FPN_3x/config',
#                                 extra_config={"MODEL.ROI_HEADS.SCORE_THRESH_TEST": 0.5})

# Detect layout elements
# layout = model.detect(image)

# Process the layout (e.g., extract text, group elements)
# print(layout)
```

--------------------------------

TITLE: Layout Element Scaling
DESCRIPTION: Scales the current block by a given factor in the x and y directions.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_7

LANGUAGE: Python
CODE:
```
block.scale(fx, fy)
```

--------------------------------

TITLE: Layout Element Shifting
DESCRIPTION: Moves the current block by specified distances in the x and y directions.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_8

LANGUAGE: Python
CODE:
```
block.shift(dx, dy)
```

--------------------------------

TITLE: Python: Process EPub Document
DESCRIPTION: Demonstrates the process of partitioning an EPUB document using the unstructured library. This extracts text content from e-books.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_49

LANGUAGE: Python
CODE:
```
from unstructured.partition.epub import partition_epub

# Process an epub file
elements = partition_epub(filename="./example.epub")

# Print the elements
for element in elements:
    print(element)
```

--------------------------------

TITLE: Python: Process Microsoft Office Documents
DESCRIPTION: Shows how to process Microsoft Office documents like Word (.docx) and PowerPoint (.pptx) using the unstructured library in Python. This enables extraction of text and metadata from these file types.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_77

LANGUAGE: Python
CODE:
```
from unstructured.partition.docx import partition_docx
from unstructured.partition.pptx import partition_pptx

# Example: Partition a DOCX file
with open("example.docx", "rb") as f:
    elements = partition_docx(file=f)

for element in elements:
    print(element.text)

# Example: Partition a PPTX file
with open("example.pptx", "rb") as f:
    elements = partition_pptx(file=f)

for element in elements:
    print(element.text)
```

--------------------------------

TITLE: Partition Example with Unstructured
DESCRIPTION: Demonstrates how to use the `partition` function from the unstructured library to process a given file and print the extracted elements.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/README.md#_snippet_6

LANGUAGE: python
CODE:
```
from unstructured.partition.auto import partition

elements = partition(filename="example-docs/eml/fake-email.eml")
print("\n\n".join([str(el) for el in elements]))
```

--------------------------------

TITLE: Handling Different File Formats
DESCRIPTION: This example demonstrates the versatility of the unstructured library in handling a wide range of file formats. It shows how to partition files such as .txt, .csv, and .pptx, extracting their content effectively.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_159

LANGUAGE: Python
CODE:
```
from unstructured.partition.text import partition_text
from unstructured.partition.csv import partition_csv
from unstructured.partition.pptx import partition_pptx

# Process a text file
text_elements = partition_text(filename="file.txt")

# Process a CSV file
csv_elements = partition_csv(filename="file.csv")

# Process a PPTX file
pptx_elements = partition_pptx(filename="file.pptx")
```

--------------------------------

TITLE: Convert Block Coordinates to Relative
DESCRIPTION: Converts the absolute coordinates of a block to coordinates relative to another block.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_12

LANGUAGE: Python
CODE:
```
block1.relative_to(block2)
```

--------------------------------

TITLE: Install LayoutParser via Pip
DESCRIPTION: This snippet shows the command to install the LayoutParser library using pip, the standard package installer for Python. It ensures that all necessary dependencies are downloaded and installed.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_3

LANGUAGE: bash
CODE:
```
pip install layoutparser
```

--------------------------------

TITLE: PDFMiner.six Version Constraint
DESCRIPTION: Sets a version constraint for the pdfminer.six library to avoid issues encountered with versions above '20250416'.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/deps/constraints.txt#_snippet_5

LANGUAGE: Python
CODE:
```
pdfminer.six<20250416
```

--------------------------------

TITLE: Detectron2 for Object Detection
DESCRIPTION: Detectron2 is a library for object detection and segmentation tasks. It is developed by Facebook AI Research and provides a flexible framework for implementing and experimenting with state-of-the-art models.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_21

LANGUAGE: Python
CODE:
```
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# Some basic setup
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.engine import DefaultTrainer

# Assume dataset is registered
# dataset_dicts = get_your_dataset_dicts("your_dataset")
# for d in "your_dataset_train", "your_dataset_val":
#     DatasetCatalog.register(d, lambda: get_your_dataset_dicts(d))
#     MetadataCatalog.get(d).set(thing_classes=["your_classes"])

# trainer = DefaultTrainer(cfg)
# trainer.resume_or_load(resume=False)
# trainer.train()
```

--------------------------------

TITLE: Install regex
DESCRIPTION: Installs the regex library version 2025.7.34, a dependency for transformers and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_62

LANGUAGE: shell
CODE:
```
pip install regex==2025.7.34
```

--------------------------------

TITLE: Install six
DESCRIPTION: Installs the six library version 1.17.0, a dependency for python-dateutil and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_67

LANGUAGE: shell
CODE:
```
pip install six==1.17.0
```

--------------------------------

TITLE: Python: Process Documents with Include Unpartitionable
DESCRIPTION: Shows how to include files that cannot be partitioned by the library, allowing for review of unprocessable content.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured/file_utils/test-file-contents.txt#_snippet_138

LANGUAGE: Python
CODE:
```
from unstructured.partition.auto import partition

# Example usage:
filename = "mixed_content.zip"
partition(filename=filename, include_unpartitionable=True)
```

--------------------------------

TITLE: Install python-multipart
DESCRIPTION: Installs the python-multipart library version 0.0.20, a dependency for unstructured-inference.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_58

LANGUAGE: shell
CODE:
```
pip install python-multipart==0.0.20
```

--------------------------------

TITLE: Install mpmath
DESCRIPTION: Installs the mpmath library version 1.3.0, a dependency for sympy.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_33

LANGUAGE: shell
CODE:
```
pip install mpmath==1.3.0
```

--------------------------------

TITLE: Install requests
DESCRIPTION: Installs the requests library version 2.32.5, a dependency for google-api-core, huggingface-hub, transformers, and used in base.txt.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_63

LANGUAGE: shell
CODE:
```
pip install requests==2.32.5
```

--------------------------------

TITLE: Install matplotlib
DESCRIPTION: Installs the matplotlib library version 3.9.4, a dependency for unstructured-inference.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/requirements/extra-pdf-image.txt#_snippet_32

LANGUAGE: shell
CODE:
```
pip install matplotlib==3.9.4
```

--------------------------------

TITLE: Layout Detection with Detectron2 in LayoutParser
DESCRIPTION: This snippet demonstrates how to perform layout detection using a pre-trained model from LayoutParser, built upon Detectron2. It shows the minimal four lines of Python code required to load a model and detect layouts in an image.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-html/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.html#_snippet_4

LANGUAGE: Python
CODE:
```
import layoutparser as lp
import cv2

image = cv2.imread("image_file") # load images
model = lp.Detectron2LayoutModel("lp://PubLayNet/faster_rcnn_R_50_FPN_3x/config")
layout = model.detect(image)
```

--------------------------------

TITLE: Convert Layout Block Coordinates to Relative
DESCRIPTION: Illustrates the 'relative_to' method for LayoutParser's layout elements. This method converts a block's absolute coordinates to coordinates relative to another specified block.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_14

LANGUAGE: Python
CODE:
```
block1.relative_to(block2)
```

--------------------------------

TITLE: Crop Image Region Based on Layout Block
DESCRIPTION: Shows the 'crop_image' method for LayoutParser's layout elements. This method extracts the image segment corresponding to the block's region from a given image.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_16

LANGUAGE: Python
CODE:
```
block.crop_image(image)
```

--------------------------------

TITLE: Shift Layout Block
DESCRIPTION: Shows the 'shift' method for LayoutParser's layout elements. This method moves a block by specified distances in the x and y directions, enabling positional adjustments.

SOURCE: https://github.com/unstructured-io/unstructured/blob/main/test_unstructured_ingest/expected-structured-output-markdown/local-single-file-with-pdf-infer-table-structure/layout-parser-paper.pdf.md#_snippet_10

LANGUAGE: Python
CODE:
```
block.shift(dx, dy)
```
