# PydanticAI Unique Identifiers for Grep/Hook Detection
# Generated from PydanticAI v1.0.5 documentation
# Use these unique identifiers to detect PydanticAI code in files

## Core Imports and Modules
from pydantic_ai
import pydantic_ai
pydantic_ai.Agent
pydantic_ai.RunContext
pydantic_ai.Tool
pydantic_ai.ModelRetry
pydantic_ai.UnexpectedModelBehavior
pydantic_ai.ToolDefinition
pydantic_ai.TextOutput
pydantic_ai.NativeOutput
pydantic_ai.capture_run_messages
pydantic_ai.models.ALLOW_MODEL_REQUESTS
pydantic_ai.DocumentUrl
pydantic_ai.ImageUrl
pydantic_ai.DeferredToolRequests
pydantic_ai.DeferredToolResults

## Classes and Types
Agent[
RunContext[
ModelRetry(
UnexpectedModelBehavior
ToolDefinition
TextOutput(
NativeOutput(
RequestUsage
ModelRequestParameters
AgentInfo
FunctionModel
TestModel
capture_run_messages

## Decorators
@agent.tool
@agent.tool_plain
@agent.system_prompt
@agent.instructions
@agent.output_validator
@agent.toolset
@weather_agent.tool
@support_agent.tool
@joke_agent.tool
@sql_agent.tool
@router_agent.tool

## Message Types
from pydantic_ai.messages
pydantic_ai.messages.ModelMessage
pydantic_ai.messages.ModelRequest
pydantic_ai.messages.ModelResponse
pydantic_ai.messages.ModelMessagesTypeAdapter
pydantic_ai.messages.TextPart
pydantic_ai.messages.ToolCallPart
pydantic_ai.messages.ToolReturnPart
pydantic_ai.messages.UserPromptPart
pydantic_ai.messages.SystemPromptPart
pydantic_ai.messages.RetryPromptPart
pydantic_ai.messages.AgentStreamEvent
pydantic_ai.messages.FinalResultEvent
pydantic_ai.messages.FunctionToolCallEvent
pydantic_ai.messages.FunctionToolResultEvent
pydantic_ai.messages.PartDeltaEvent
pydantic_ai.messages.PartStartEvent
pydantic_ai.messages.TextPartDelta
pydantic_ai.messages.ThinkingPartDelta
pydantic_ai.messages.ToolCallPartDelta
ModelMessagesTypeAdapter
TextPart(
ToolCallPart(
ToolReturnPart(
UserPromptPart(
SystemPromptPart(
RetryPromptPart(

## Streaming Events
AgentStreamEvent
FinalResultEvent
FunctionToolCallEvent
FunctionToolResultEvent
PartDeltaEvent
PartStartEvent
TextPartDelta
ThinkingPartDelta
ToolCallPartDelta

## Methods and Functions
agent.run(
agent.run_sync(
agent.run_stream(
agent.override(
agent.process(
agent.iter(
agent.get_usage(
agent.all_messages(
agent.new_messages(
agent.to_ag_ui(
result.stream_text(
result.stream_output(
result.stream_responses(
result.validate_response_output(
result.all_messages()
result.new_messages()
run.stream_text(
run.stream_output(
Agent.is_user_prompt_node(
Agent.is_model_request_node(
Agent.is_call_tools_node(
Agent.is_end_node(
ctx.deps
ctx.run_step
ctx.usage
ctx.messages
prepare_tools=
history_processors=
deps_type=
output_type=
event_stream_handler=
message_history=
deferred_tool_results=
allow_partial=
debounce_by=
delta=True
delta=False
stream_text(delta=
takes_ctx=

## Toolsets
from pydantic_ai.toolsets
pydantic_ai.toolsets.FunctionToolset
pydantic_ai.toolsets.ExternalToolset
pydantic_ai.toolsets.FilteredToolset
FunctionToolset(
ExternalToolset(
FilteredToolset(
toolset.tool
toolset.add_function
toolset.filtered(
@toolset.tool
weather_toolset
datetime_toolset
combined_toolset
filtered_toolset

## Models and Providers
from pydantic_ai.models
pydantic_ai.models.test.TestModel
pydantic_ai.models.function.FunctionModel
pydantic_ai.models.function.AgentInfo
pydantic_ai.models.openai.OpenAIChatModel
pydantic_ai.models.openai.OpenAIResponsesModel
pydantic_ai.models.google.GoogleModel
pydantic_ai.models.anthropic.AnthropicModel
pydantic_ai.providers.openai.OpenAIProvider
pydantic_ai.providers.google.GoogleProvider
pydantic_ai.providers.anthropic.AnthropicProvider
pydantic_ai.providers.azure.AzureProvider
OpenAIChatModel(
OpenAIResponsesModel(
GoogleModel(
AnthropicModel(
OpenAIProvider(
GoogleProvider(
AnthropicProvider(
AzureProvider(
TestModel()
FunctionModel(

## Direct API
from pydantic_ai.direct
pydantic_ai.direct.model_request
pydantic_ai.direct.model_request_sync
model_request(
model_request_sync(

## Retry Handling
from pydantic_ai.retries
pydantic_ai.retries.AsyncTenacityTransport
pydantic_ai.retries.TenacityTransport
pydantic_ai.retries.RetryConfig
pydantic_ai.retries.wait_retry_after
AsyncTenacityTransport(
TenacityTransport(
RetryConfig(
wait_retry_after(

## MCP Integration
from pydantic_ai.mcp
pydantic_ai.mcp.MCPServerStdio
pydantic_ai.mcp.MCPServerSSE
pydantic_ai.ag_ui
pydantic_ai.ag_ui.run_ag_ui
pydantic_ai.ag_ui.StateDeps
pydantic_ai.ag_ui.SSE_CONTENT_TYPE
MCPServerStdio(
MCPServerSSE(
run_ag_ui(
StateDeps[
SSE_CONTENT_TYPE

## Testing
capture_run_messages()
with capture_run_messages()
models.ALLOW_MODEL_REQUESTS
last_model_request_parameters
function_tools

## Common Patterns
'openai:gpt-4o'
'google-gla:gemini-
'anthropic:claude-
'azure:
deps=ctx.deps
deps=deps
deps_type=
output_type=
toolsets=[
tools=[
message_history=
event_stream_handler=
deferred_tool_results=
run_sync(
run_stream(
stream_text(
stream_output(
@agent.
@support_agent.
@weather_agent.
@joke_agent.
@sql_agent.
@router_agent.
RunContext[
Agent[
ctx: RunContext
async with agent.run_stream
async with agent.iter
async for text in result.stream_text
async for output in result.stream_output
async for message in result.stream_text
async for profile in result.stream_output
async for event in event_stream
async for node in run

## Environment Variables and Configuration
PYDANTIC_AI_
instrument_pydantic_ai(
logfire.instrument_pydantic_ai

## Output Types and Validators
output_type=
@agent.output_validator
validate_response_output
allow_partial=
BioCurationOutput
BioCurationDependencies
SupportOutput
SupportDependencies
PersonalizedGreeting
UserProfile
Success
InvalidRequest
RouterFailure
SQLFailure

## Special Attributes
.deps
.run_step
.usage
.output
.all_messages()
.new_messages()
.stream_text()
.stream_output()
.last_model_request_parameters
.function_tools
.override(
.iter(
.to_ag_ui(

## Error Types
ModelRetry
UnexpectedModelBehavior
ValidationError
QueryError
ElicitRequest
ElicitResult
ElicitRequestParams

## Streaming Specific
stream=True
stream=False
streaming=
isStreaming
stream_text(delta=
stream_responses(
event_stream_handler
event_stream
StreamingUpdate
StreamingResponse
run_stream(
iter(
node.stream(
request_stream.stream_text()
request_stream.stream_output()
handle_stream
_process_stream
_stream_response

## Agent Configuration
system_prompt=
instructions=
prepare_tools=
history_processors=
max_history_messages
enable_history_summary
tool_calls
tool_call_id
retries=
strict=True
use_attribute_docstrings

## Common Method Names Unique to PydanticAI
process(
run_sync(
run_stream(
stream_text(
stream_output(
stream_responses(
validate_response_output(
all_messages(
new_messages(
get_usage(
override(
iter(
to_ag_ui(
capture_run_messages(
instrument_pydantic_ai(
is_user_prompt_node(
is_model_request_node(
is_call_tools_node(
is_end_node(
